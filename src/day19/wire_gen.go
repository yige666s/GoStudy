// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"errors"
	"github.com/google/wire"
)

// Injectors from wire.go:

// 应用程序中是用一个injector来连接Provider，injector就是一个按照依赖顺序调用Provider。
// 要声明一个注入器函数只需要在函数体中调用wire.Build。这个函数的返回值也无关紧要，只要它们的类型正确即可
// go:build wireinject,确保wire.go不会参与最终的项目编译
func initZ(ctx context.Context) (Z, error) {
	y, err := NewY()
	if err != nil {
		return Z{}, err
	}
	z, err := NewZ(ctx, y)
	if err != nil {
		return Z{}, err
	}
	return z, nil
}

// wire.go:

// Wire 是一个的 Google 开源的依赖注入工具，通过自动生成代码的方式在编译期完成依赖注入。
// wire中有两个核心概念：提供者（provider）和注入器（injector）。
// Wire中的提供者就是一个可以产生值的普通函数。
type Z struct {
	Value int
}

type Y struct {
	Value int
}

func NewY() (Y, error) {
	return Y{Value: 1}, nil
}

func NewZ(ctx context.Context, y Y) (Z, error) {
	if y.Value == 0 {
		return Z{}, errors.New("cannot provide z when value is zero")
	}
	return Z{Value: y.Value + 1}, nil
}

// Provider函数可以分组为提供者函数集（provider set）。
// 使用wire.NewSet 函数可以将多个提供者函数添加到一个集合中。如果经常同时使用多个提供者函数，这非常有用。
var Providerset = wire.NewSet(NewZ, NewY)
