// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"day10/dal/model"
)

func newDeletedUser(db *gorm.DB, opts ...gen.DOOption) deletedUser {
	_deletedUser := deletedUser{}

	_deletedUser.deletedUserDo.UseDB(db, opts...)
	_deletedUser.deletedUserDo.UseModel(&model.DeletedUser{})

	tableName := _deletedUser.deletedUserDo.TableName()
	_deletedUser.ALL = field.NewAsterisk(tableName)
	_deletedUser.ID = field.NewInt64(tableName, "id")
	_deletedUser.CreatedAt = field.NewTime(tableName, "created_at")
	_deletedUser.UpdatedAt = field.NewTime(tableName, "updated_at")
	_deletedUser.DeletedAt = field.NewField(tableName, "deleted_at")
	_deletedUser.Name = field.NewString(tableName, "name")
	_deletedUser.Gender = field.NewString(tableName, "gender")

	_deletedUser.fillFieldMap()

	return _deletedUser
}

type deletedUser struct {
	deletedUserDo deletedUserDo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Name      field.String
	Gender    field.String

	fieldMap map[string]field.Expr
}

func (d deletedUser) Table(newTableName string) *deletedUser {
	d.deletedUserDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deletedUser) As(alias string) *deletedUser {
	d.deletedUserDo.DO = *(d.deletedUserDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deletedUser) updateTableName(table string) *deletedUser {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.Name = field.NewString(table, "name")
	d.Gender = field.NewString(table, "gender")

	d.fillFieldMap()

	return d
}

func (d *deletedUser) WithContext(ctx context.Context) IDeletedUserDo {
	return d.deletedUserDo.WithContext(ctx)
}

func (d deletedUser) TableName() string { return d.deletedUserDo.TableName() }

func (d deletedUser) Alias() string { return d.deletedUserDo.Alias() }

func (d deletedUser) Columns(cols ...field.Expr) gen.Columns { return d.deletedUserDo.Columns(cols...) }

func (d *deletedUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deletedUser) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 6)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["name"] = d.Name
	d.fieldMap["gender"] = d.Gender
}

func (d deletedUser) clone(db *gorm.DB) deletedUser {
	d.deletedUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deletedUser) replaceDB(db *gorm.DB) deletedUser {
	d.deletedUserDo.ReplaceDB(db)
	return d
}

type deletedUserDo struct{ gen.DO }

type IDeletedUserDo interface {
	gen.SubQuery
	Debug() IDeletedUserDo
	WithContext(ctx context.Context) IDeletedUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeletedUserDo
	WriteDB() IDeletedUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeletedUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeletedUserDo
	Not(conds ...gen.Condition) IDeletedUserDo
	Or(conds ...gen.Condition) IDeletedUserDo
	Select(conds ...field.Expr) IDeletedUserDo
	Where(conds ...gen.Condition) IDeletedUserDo
	Order(conds ...field.Expr) IDeletedUserDo
	Distinct(cols ...field.Expr) IDeletedUserDo
	Omit(cols ...field.Expr) IDeletedUserDo
	Join(table schema.Tabler, on ...field.Expr) IDeletedUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeletedUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeletedUserDo
	Group(cols ...field.Expr) IDeletedUserDo
	Having(conds ...gen.Condition) IDeletedUserDo
	Limit(limit int) IDeletedUserDo
	Offset(offset int) IDeletedUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeletedUserDo
	Unscoped() IDeletedUserDo
	Create(values ...*model.DeletedUser) error
	CreateInBatches(values []*model.DeletedUser, batchSize int) error
	Save(values ...*model.DeletedUser) error
	First() (*model.DeletedUser, error)
	Take() (*model.DeletedUser, error)
	Last() (*model.DeletedUser, error)
	Find() ([]*model.DeletedUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeletedUser, err error)
	FindInBatches(result *[]*model.DeletedUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DeletedUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeletedUserDo
	Assign(attrs ...field.AssignExpr) IDeletedUserDo
	Joins(fields ...field.RelationField) IDeletedUserDo
	Preload(fields ...field.RelationField) IDeletedUserDo
	FirstOrInit() (*model.DeletedUser, error)
	FirstOrCreate() (*model.DeletedUser, error)
	FindByPage(offset int, limit int) (result []*model.DeletedUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeletedUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deletedUserDo) Debug() IDeletedUserDo {
	return d.withDO(d.DO.Debug())
}

func (d deletedUserDo) WithContext(ctx context.Context) IDeletedUserDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deletedUserDo) ReadDB() IDeletedUserDo {
	return d.Clauses(dbresolver.Read)
}

func (d deletedUserDo) WriteDB() IDeletedUserDo {
	return d.Clauses(dbresolver.Write)
}

func (d deletedUserDo) Session(config *gorm.Session) IDeletedUserDo {
	return d.withDO(d.DO.Session(config))
}

func (d deletedUserDo) Clauses(conds ...clause.Expression) IDeletedUserDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deletedUserDo) Returning(value interface{}, columns ...string) IDeletedUserDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deletedUserDo) Not(conds ...gen.Condition) IDeletedUserDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deletedUserDo) Or(conds ...gen.Condition) IDeletedUserDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deletedUserDo) Select(conds ...field.Expr) IDeletedUserDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deletedUserDo) Where(conds ...gen.Condition) IDeletedUserDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deletedUserDo) Order(conds ...field.Expr) IDeletedUserDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deletedUserDo) Distinct(cols ...field.Expr) IDeletedUserDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deletedUserDo) Omit(cols ...field.Expr) IDeletedUserDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deletedUserDo) Join(table schema.Tabler, on ...field.Expr) IDeletedUserDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deletedUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeletedUserDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deletedUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeletedUserDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deletedUserDo) Group(cols ...field.Expr) IDeletedUserDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deletedUserDo) Having(conds ...gen.Condition) IDeletedUserDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deletedUserDo) Limit(limit int) IDeletedUserDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deletedUserDo) Offset(offset int) IDeletedUserDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deletedUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeletedUserDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deletedUserDo) Unscoped() IDeletedUserDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deletedUserDo) Create(values ...*model.DeletedUser) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deletedUserDo) CreateInBatches(values []*model.DeletedUser, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deletedUserDo) Save(values ...*model.DeletedUser) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deletedUserDo) First() (*model.DeletedUser, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeletedUser), nil
	}
}

func (d deletedUserDo) Take() (*model.DeletedUser, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeletedUser), nil
	}
}

func (d deletedUserDo) Last() (*model.DeletedUser, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeletedUser), nil
	}
}

func (d deletedUserDo) Find() ([]*model.DeletedUser, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeletedUser), err
}

func (d deletedUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeletedUser, err error) {
	buf := make([]*model.DeletedUser, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deletedUserDo) FindInBatches(result *[]*model.DeletedUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deletedUserDo) Attrs(attrs ...field.AssignExpr) IDeletedUserDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deletedUserDo) Assign(attrs ...field.AssignExpr) IDeletedUserDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deletedUserDo) Joins(fields ...field.RelationField) IDeletedUserDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deletedUserDo) Preload(fields ...field.RelationField) IDeletedUserDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deletedUserDo) FirstOrInit() (*model.DeletedUser, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeletedUser), nil
	}
}

func (d deletedUserDo) FirstOrCreate() (*model.DeletedUser, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeletedUser), nil
	}
}

func (d deletedUserDo) FindByPage(offset int, limit int) (result []*model.DeletedUser, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deletedUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deletedUserDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deletedUserDo) Delete(models ...*model.DeletedUser) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deletedUserDo) withDO(do gen.Dao) *deletedUserDo {
	d.DO = *do.(*gen.DO)
	return d
}
