// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"day10/dal/model"
)

func newUserinfo(db *gorm.DB, opts ...gen.DOOption) userinfo {
	_userinfo := userinfo{}

	_userinfo.userinfoDo.UseDB(db, opts...)
	_userinfo.userinfoDo.UseModel(&model.Userinfo{})

	tableName := _userinfo.userinfoDo.TableName()
	_userinfo.ALL = field.NewAsterisk(tableName)
	_userinfo.ID = field.NewInt64(tableName, "id")
	_userinfo.Name = field.NewString(tableName, "name")
	_userinfo.Gender = field.NewString(tableName, "gender")

	_userinfo.fillFieldMap()

	return _userinfo
}

type userinfo struct {
	userinfoDo userinfoDo

	ALL    field.Asterisk
	ID     field.Int64
	Name   field.String
	Gender field.String

	fieldMap map[string]field.Expr
}

func (u userinfo) Table(newTableName string) *userinfo {
	u.userinfoDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userinfo) As(alias string) *userinfo {
	u.userinfoDo.DO = *(u.userinfoDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userinfo) updateTableName(table string) *userinfo {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.Name = field.NewString(table, "name")
	u.Gender = field.NewString(table, "gender")

	u.fillFieldMap()

	return u
}

func (u *userinfo) WithContext(ctx context.Context) IUserinfoDo { return u.userinfoDo.WithContext(ctx) }

func (u userinfo) TableName() string { return u.userinfoDo.TableName() }

func (u userinfo) Alias() string { return u.userinfoDo.Alias() }

func (u userinfo) Columns(cols ...field.Expr) gen.Columns { return u.userinfoDo.Columns(cols...) }

func (u *userinfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userinfo) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["id"] = u.ID
	u.fieldMap["name"] = u.Name
	u.fieldMap["gender"] = u.Gender
}

func (u userinfo) clone(db *gorm.DB) userinfo {
	u.userinfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userinfo) replaceDB(db *gorm.DB) userinfo {
	u.userinfoDo.ReplaceDB(db)
	return u
}

type userinfoDo struct{ gen.DO }

type IUserinfoDo interface {
	gen.SubQuery
	Debug() IUserinfoDo
	WithContext(ctx context.Context) IUserinfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserinfoDo
	WriteDB() IUserinfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserinfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserinfoDo
	Not(conds ...gen.Condition) IUserinfoDo
	Or(conds ...gen.Condition) IUserinfoDo
	Select(conds ...field.Expr) IUserinfoDo
	Where(conds ...gen.Condition) IUserinfoDo
	Order(conds ...field.Expr) IUserinfoDo
	Distinct(cols ...field.Expr) IUserinfoDo
	Omit(cols ...field.Expr) IUserinfoDo
	Join(table schema.Tabler, on ...field.Expr) IUserinfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserinfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserinfoDo
	Group(cols ...field.Expr) IUserinfoDo
	Having(conds ...gen.Condition) IUserinfoDo
	Limit(limit int) IUserinfoDo
	Offset(offset int) IUserinfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserinfoDo
	Unscoped() IUserinfoDo
	Create(values ...*model.Userinfo) error
	CreateInBatches(values []*model.Userinfo, batchSize int) error
	Save(values ...*model.Userinfo) error
	First() (*model.Userinfo, error)
	Take() (*model.Userinfo, error)
	Last() (*model.Userinfo, error)
	Find() ([]*model.Userinfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Userinfo, err error)
	FindInBatches(result *[]*model.Userinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Userinfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserinfoDo
	Assign(attrs ...field.AssignExpr) IUserinfoDo
	Joins(fields ...field.RelationField) IUserinfoDo
	Preload(fields ...field.RelationField) IUserinfoDo
	FirstOrInit() (*model.Userinfo, error)
	FirstOrCreate() (*model.Userinfo, error)
	FindByPage(offset int, limit int) (result []*model.Userinfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserinfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userinfoDo) Debug() IUserinfoDo {
	return u.withDO(u.DO.Debug())
}

func (u userinfoDo) WithContext(ctx context.Context) IUserinfoDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userinfoDo) ReadDB() IUserinfoDo {
	return u.Clauses(dbresolver.Read)
}

func (u userinfoDo) WriteDB() IUserinfoDo {
	return u.Clauses(dbresolver.Write)
}

func (u userinfoDo) Session(config *gorm.Session) IUserinfoDo {
	return u.withDO(u.DO.Session(config))
}

func (u userinfoDo) Clauses(conds ...clause.Expression) IUserinfoDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userinfoDo) Returning(value interface{}, columns ...string) IUserinfoDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userinfoDo) Not(conds ...gen.Condition) IUserinfoDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userinfoDo) Or(conds ...gen.Condition) IUserinfoDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userinfoDo) Select(conds ...field.Expr) IUserinfoDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userinfoDo) Where(conds ...gen.Condition) IUserinfoDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userinfoDo) Order(conds ...field.Expr) IUserinfoDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userinfoDo) Distinct(cols ...field.Expr) IUserinfoDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userinfoDo) Omit(cols ...field.Expr) IUserinfoDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userinfoDo) Join(table schema.Tabler, on ...field.Expr) IUserinfoDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userinfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserinfoDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userinfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserinfoDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userinfoDo) Group(cols ...field.Expr) IUserinfoDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userinfoDo) Having(conds ...gen.Condition) IUserinfoDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userinfoDo) Limit(limit int) IUserinfoDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userinfoDo) Offset(offset int) IUserinfoDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userinfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserinfoDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userinfoDo) Unscoped() IUserinfoDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userinfoDo) Create(values ...*model.Userinfo) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userinfoDo) CreateInBatches(values []*model.Userinfo, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userinfoDo) Save(values ...*model.Userinfo) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userinfoDo) First() (*model.Userinfo, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Userinfo), nil
	}
}

func (u userinfoDo) Take() (*model.Userinfo, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Userinfo), nil
	}
}

func (u userinfoDo) Last() (*model.Userinfo, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Userinfo), nil
	}
}

func (u userinfoDo) Find() ([]*model.Userinfo, error) {
	result, err := u.DO.Find()
	return result.([]*model.Userinfo), err
}

func (u userinfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Userinfo, err error) {
	buf := make([]*model.Userinfo, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userinfoDo) FindInBatches(result *[]*model.Userinfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userinfoDo) Attrs(attrs ...field.AssignExpr) IUserinfoDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userinfoDo) Assign(attrs ...field.AssignExpr) IUserinfoDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userinfoDo) Joins(fields ...field.RelationField) IUserinfoDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userinfoDo) Preload(fields ...field.RelationField) IUserinfoDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userinfoDo) FirstOrInit() (*model.Userinfo, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Userinfo), nil
	}
}

func (u userinfoDo) FirstOrCreate() (*model.Userinfo, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Userinfo), nil
	}
}

func (u userinfoDo) FindByPage(offset int, limit int) (result []*model.Userinfo, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userinfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userinfoDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userinfoDo) Delete(models ...*model.Userinfo) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userinfoDo) withDO(do gen.Dao) *userinfoDo {
	u.DO = *do.(*gen.DO)
	return u
}
